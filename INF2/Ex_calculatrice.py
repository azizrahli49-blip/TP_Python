import tkinter as tk
import math

class Calculatrice(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        '''
        Nous initialisons ici les diff√©rentes variables de la fen√™tre calculatrice, et nous cr√©ons les boutons et labels 
        qui s'y trouverons, ainsi que d'autres param√®tres tel que son emplacement sur l'√©cran et le nom de la fen√™tre.
        '''
        self.nombre1=""
        self.nombre2=""
        self.symbole_operation=""
        self.resultat=""
        self.sous_methode=False
        self.historique=[]
        self.position_historique=0
        self.creation_label()
        self.creation_button_chiffre()
        self.creation_button_operation()
        self.creation_button_autres()
        self.eval('tk::PlaceWindow . center')
        self.title('Calculatrice')

    def creation_label(self):
        '''
        Les labels suivant sont :
            - le titre de la fen√™tre,
            - l'affichage du calcul encours (self.calcul) qui pourra √™tre modifi√© dans la suite du code, il est initialement vide,
            - l'affichage de l'historique (self.label_historique) qui sera √©galement modifiable et initialis√© vide, il est accompagn√©
              d'un label fixe avec la mention 'pr√©c√©dent'.
        '''
        tk.Label(self, text='CALCULATRICE', font=('BOLD', 14), height=2).grid(row=0, column=1, columnspan=5)
        self.calcul=tk.Label(self, text="", bg='white', font=1, width=22, height=2, relief='groove', borderwidth=4)
        self.calcul.grid(row=5, column=1, columnspan=5)
        tk.Label(self, text="Pr√©c√©dent : ").grid(row=1, column=1, columnspan=2)
        self.label_historique=tk.Label(self, text="", bg='white', font=1, width=22, relief='groove', borderwidth=4)
        self.label_historique.grid(row=2, column=1, columnspan=5)
        ''' Les labels suivant sont uniquement pr√©sents pour des raisons d'esth√©tismes de la fen√™tre '''
        tk.Label(self,text="").grid(row=1, column=1, columnspan=5)
        tk.Label(self,text="").grid(row=4, column=1, columnspan=5)
        tk.Label(self,text="").grid(row=6, column=1, columnspan=5)
        tk.Label(self,text="").grid(row=12, column=1, columnspan=5)
        tk.Label(self,text="", height=1).grid(row=14, column=1, columnspan=5)
        tk.Label(self,text="", width=2).grid(row=0, column=0, rowspan=15)
        tk.Label(self,text="", width=2).grid(row=0, column=6, rowspan=15)

    def creation_button_chiffre(self):
        '''
        Cette m√©thode permet de cr√©er tous les boutons de la calculatrice pr√©sentant des chiffres de 0 √† 9 ainsi que les caract√®res '.'
        et 'pi'. L'activation de chacun d'entre eux appelle la m√©thode 'self.nombre' suivante, cependant, elle prend en param√®tre le caract√®re
        correspondant c'est pourquoi la fonction lambda est utilis√©e ici.
        '''
        tk.Button(self, text='1', command=lambda : self.nombre('1'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=7, column=1)
        tk.Button(self, text='2', command=lambda :self.nombre('2'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=7, column=2)
        tk.Button(self, text='3', command=lambda :self.nombre('3'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=7, column=3)
        tk.Button(self, text='4', command=lambda :self.nombre('4'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=8, column=1)
        tk.Button(self, text='5', command=lambda :self.nombre('5'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=8, column=2)
        tk.Button(self, text='6', command=lambda :self.nombre('6'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=8, column=3)
        tk.Button(self, text='7', command=lambda :self.nombre('7'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=9, column=1)
        tk.Button(self, text='8', command=lambda :self.nombre('8'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=9, column=2)
        tk.Button(self, text='9', command=lambda :self.nombre('9'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=9, column=3)
        tk.Button(self, text='0', command=lambda :self.nombre('0'), bg='tomato', fg='white', font=2, width=2, height=1,borderwidth=5, relief='groove').grid(row=10, column=1)
        tk.Button(self, text='.', command=lambda :self.nombre('.'), bg='darksalmon', fg='white', font=2, width=6, height=1,borderwidth=5, relief='groove').grid(row=10, column=2, columnspan=2)
        tk.Button(self, text='ùùÖ', command=lambda : self.nombre('pi'), bg='darkgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=10, column=5)

    def nombre(self, chiffre):
        '''
        Cette m√©thode permet de compl√©ter les deux variables 'self.nombre1' et 'self.nombre2' rentr√©es par l'utilisateur en actionnant les
        boutons souhait√©s. Elle prend donc en param√®tre le chiffre (ou caract√®re '.' et 'pi') en entr√©e, et l'ajoute au nombre1 si l'utilisateur
        n'a pas encore s√©lectionn√© d'op√©ration (+,-...), sinon au nombre2. Nous noterons que si il entre le param√®tre 'pi' alors le nombre entier
        est remplac√©. De plus, si une sous m√©thode (cos, sin...) a √©t√© appliqu√©e alors il n'est pas possible de modifier le nombre.
        La premi√®re boucle 'if' permet de r√©initialiser le calcul pr√©c√©dent, gr√¢ce √† la fonction self.supprimer.
        Entr√©e : variable string correspondant au chiffre ou au caract√®re (pi ou virgule) √† ajouter
        Sortie : modification du nombre1 ou du nombre2 (toutes deux des variables str), affichage sur le label self.calcul
        '''
        if self.resultat!="" :
            self.supprimer()
        if self.sous_methode==False:
            if chiffre=='pi' :
                if self.symbole_operation=="" :
                    self.nombre1='ùùÖ'
                else :
                    self.nombre2='ùùÖ'
            elif chiffre=='.' and self.symbole_operation=="" and self.nombre1=="":
                self.nombre1='0.'
            elif chiffre=='.' and self.symbole_operation!="" and self.nombre2=="":
                self.nombre2='0.'
            elif self.symbole_operation=="" :
                self.nombre1=self.nombre1+chiffre
            elif self.symbole_operation!="" :
                self.nombre2=self.nombre2+chiffre
            self.calcul.config(text=self.nombre1+self.symbole_operation+self.nombre2, width=0)

    def creation_button_operation(self):
        '''
        Cette m√©thode permet de cr√©er les diff√©rents boutons :
            - des op√©rations (addition, soustraction, multiplication et division) qui font ensuite appellent √† la m√©thode self.operation,
              de la m√™me mani√®re que pour les boutons des chiffres,
            - des sous-op√©rations (cosinus, sinus, racine carr√©e, tangente et carr√©) qui font appellent √† la m√©thode self.sous_operation,
            - d'entr√©e pour effectuer le calcul qui appelle directement la fonction self.calculer.
        '''
        tk.Button(self, text='+', command=lambda : self.operation('+'), bg='forestgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=7, column=4)
        tk.Button(self, text='-', command=lambda : self.operation('-'), bg='forestgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=8, column=4)
        tk.Button(self, text='*', command=lambda : self.operation('*'), bg='forestgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=9, column=4)
        tk.Button(self, text='/', command=lambda : self.operation('/'), bg='forestgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=10, column=4)
        tk.Button(self, text='‚àöx', command=lambda: self.sous_operation('‚àö'), bg='darkgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=11, column=4)
        tk.Button(self, text='cos', command=lambda : self.sous_operation('cos'), bg='darkgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=7, column=5)
        tk.Button(self, text='sin', command=lambda : self.sous_operation('sin'), bg='darkgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=8, column=5)
        tk.Button(self, text='tan', command=lambda: self.sous_operation('tan'), bg='darkgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=9, column=5)
        tk.Button(self, text="x¬≤", command= lambda: self.sous_operation('¬≤'), bg='darkgreen', fg='white', font=2, width=3, height=1,borderwidth=5, relief='groove').grid(row=11, column=5)
        tk.Button(self, text='Entrer', command= self.calculer, bg='darkred', fg='white', font=2, width=11, height=1,borderwidth=5, relief='groove').grid(row=11, column=1, columnspan=3)

    def operation(self, symbole):
        '''
        Cette m√©thode permet d'attribuer l'op√©ration voulue √† la variable self.symbole_operation. Elle prend en compte que :
            - si le nombre1 est vide, elle lui attribue le r√©sultat du calcul pr√©c√©dent sinon la valeur '0',
            - si l'op√©ration venant d'√™tre trait√©e n'a pas √©t√© supprim√©e, elle actionne la m√©thode self.supprimer,
            - elle r√©initialise la variable bool√©enne self.sous_methode de mani√®re √† pouvant entrer le nombre2 ensuite,
            - elle affiche le symbole entr√© sur le label self.calcul.
        Entr√©e : variable string correspondant au symbole.
        Sortie : enregistrement du symbole dans la variable correspondante et mise √† jour du label et de self.sous_methode.
        '''
        if self.resultat!="" :
            self.supprimer()
        if self.nombre1=="" :
            self.supprimer()
            if self.historique!=[] :
                self.nombre1=self.historique[len(self.historique)-1][4]
            else :
                self.nombre1='0'
        self.symbole_operation=symbole
        self.sous_methode = False
        self.calcul.config(text=self.nombre1+self.symbole_operation+self.nombre2, width=0)

    def sous_operation(self,sous_op):
        '''
        Cette m√©thode permet d'entrer des sous-m√©thodes (cos, sin...), ce qui n'est possible que si la variable nombre a √©t√© remplie
        au pr√©alable et s'il n'y a pas d√©ja une autre sous-m√©thode (il n'est pas possible de faire le cosinus d'un sinus par exemple), ce qui
        signifie qu'au moment o√π une sous-m√©thode a √©t√© s√©lectionn√©e, le nombre n'est plus modifiable.
        Entr√©e : sous op√©ration en format string
        Sortie : modification du nombre1 ou du nombre2 (toutes deux des variables str), affichage sur le label self.calcul
        '''
        if self.resultat!="" :
            self.supprimer()
        if self.nombre1=="" :
            if self.historique!=[] :
                self.nombre1=self.historique[len(self.historique)-1][4]
            else:
                self.nombre1="0"
        if self.sous_methode==False :
            if sous_op=='¬≤' :
                if self.symbole_operation=="" :
                    self.nombre1=self.nombre1+sous_op
                    self.sous_methode=True
                elif self.nombre2!="":
                    self.nombre2=self.nombre2+sous_op
                    self.sous_methode=True
            elif sous_op=='cos' or sous_op=='sin' or sous_op=='tan' or sous_op=='‚àö' :
                if self.symbole_operation=="" :
                    self.nombre1=sous_op+'('+self.nombre1+')'
                    self.sous_methode=True
                elif self.nombre2!="":
                    self.nombre2=sous_op+'('+self.nombre2+')'
                    self.sous_methode=True
            self.calcul.config(text=self.nombre1+self.symbole_operation+self.nombre2, width=0)

    def calculer(self):
        '''
        Dans cette premi√®re partie, la m√©thode traite le caract√®re 'pi' en le rempla√ßant par sa valeur et s'occupe d'effectuer
        toutes les sous-m√©thodes pr√©sentes dans les nombre1 et nombre2. Nous noterons que nous utilisons deux variables de m√©thodes
        n1 et n2 (pas directement nombre1 et nombre2) afin de garder un affichage plus clair et sans des nombres trop longs.
        Entr√©e : rien --> s'actionne lorsque l'utilisateur appuie sur ENTER.
        Sortie : des variables string o√π les sous-m√©thodes sont remplac√©es par leur 'vraie' op√©ration.
        '''
        n1=self.nombre1
        n2=self.nombre2
        if 'ùùÖ' in n1 :
            n1=n1.replace('ùùÖ',str(math.pi) )
        if 'ùùÖ' in n2 :
            n2= n2.replace('ùùÖ', str(math.pi))
        if '¬≤' in n1 :
            n1=str(float(n1[:len(n1)-1])**2)
        if '¬≤' in n2 :
            n2=str(float(n2[:len(n2)-1])**2)
        if 'tan' in n1 :
            n1=str(math.tan(float(n1[4:len(n1)-1])))
        if 'tan' in n2 :
            n2=str(math.tan(float(n2[4:len(n2)-1])))
        if 'cos' in n1 :
            n1=str(math.cos(float(n1[4:len(n1)-1])))
        if 'cos' in n2 :
            n2=str(math.cos(float(n2[4:len(n2)-1])))
        if 'sin' in n1 :
            n1=str(math.sin(float(n1[4:len(n1)-1])))
        if 'sin' in n2 :
            n2=str(math.sin(float(n2[4:len(n2)-1])))
        if '‚àö' in n1 :
            n1=str(math.sqrt(float(n1[2:len(n1)-1])))
        if '‚àö' in n2 :
            n2=str(math.sqrt(float(n2[2:len(n2)-1])))
        '''
        Cette deuxi√®me partie de la m√©thode permet d'effectuer les op√©rations (addition, soustraction...) entre les deux nombres.
        Nous remarquerons qu'elle prend en compte que :
            - si l'utilisateur veut diviser par 0, le calcul s'arr√™te, 
            - si il n'y a pas de nombre1 (et donc pas de symbole d'op√©ration, cf m√©thode self.operation) alors rien n'est rentr√©,
            - si le nombre1 est entr√© mais pas le deuxi√®me, alors il ne traite que le premier et retire le symbole d'op√©ration s'il
              avait √©t√© renseign√©
            - modifie le label calcul dans chacun des cas et enregistre dans l'historique s'il y a un r√©sultat.   
        Entr√©e : rien --> s'actionne lorsque l'utilisateur appuie sur ENTER.
        Sortie : le r√©sultat qui est ensuite affich√© et enregistr√© dans l'historique (sous format str).      
        '''
        if self.nombre1=="":
            self.calcul.config(text="", width=22)
        elif self.nombre2=="" :
            self.resultat = float(n1)
            self.symbole_operation=""
            self.calcul.config(text=self.nombre1 + ' = ' + str(self.resultat), width=0)
            self.historique.append([self.nombre1, self.symbole_operation, self.nombre2,' = ', str(self.resultat)])
        else :
            if self.symbole_operation=='+' :
                self.resultat=float(n1)+float(n2)
            elif self.symbole_operation=='-':
                self.resultat=float(n1)-float(n2)
            elif self.symbole_operation=='*':
                self.resultat=float(n1)*float(n2)
            elif self.symbole_operation=='/':
                if self.nombre2=='0':
                    self.label_historique.config(text='ERREUR : pas de division par 0', width=0)
                    self.nombre2=''
                    self.symbole_operation=''
                else :
                    self.resultat=float(n1)/float(n2)
            self.calcul.config(text=self.nombre1 + self.symbole_operation + self.nombre2 + ' = ' + str(self.resultat), width=0)
            self.historique.append([self.nombre1, self.symbole_operation, self.nombre2,' = ', str(self.resultat)])

    def creation_button_autres(self):
        '''
        Cette m√©thode permet d'afficher tous les autres boutons :
            - pour fermer la page avec self.destroy,
            - pour supprimer le calcul encours en appelant la fonction self.supprimer,
            - pour commander l'historique en le montant de haut en bas (avec la fonction self.fleche('sens')) et en relan√ßant le
              calcul sur lequel l'utilisateur est stopp√© gr√¢ce √† la m√©thode self.relancer.
        '''
        tk.Button(self, text='Vider', command=self.supprimer, bg='dimgray', fg='white', font=2, width=11, borderwidth=2, relief='groove').grid(row=13, column=1, columnspan=3)
        tk.Button(self, text='Quitter', command=self.destroy, bg='dimgray', fg='white', font=2, width=8, borderwidth=2, relief='groove').grid(row=13, column=4, columnspan=2)
        tk.Button(self, text='‚Üë', command=lambda:self.fleche('up'), bg='dimgray', fg='white', font=2, width=2, borderwidth=2, relief='groove').grid(row=3, column=1)
        tk.Button(self, text='‚Üì', command=lambda: self.fleche('down'), bg='dimgray', fg='white', font=2, width=2, borderwidth=2, relief='groove').grid(row=3, column=2)
        tk.Button(self, text='R√©p√©ter', command=self.relancer, bg='dimgray', fg='white', font=2, width=12, borderwidth=2, relief='groove').grid(row=3, column=3, columnspan=3)

    def supprimer(self):
        '''
        Cette m√©thode permet de r√©initialiser le calcul en enregistrant le calcul encours (s'il a √©t√© lancer via la m√©thode
        self.calculer) et en remettant √† vide ou √† 0 ou √† False les autres variables de mani√®re √† pouvoir lancer un nouveau calcul.
        De plus, il repositionne l'historique au dernier calcul effectu√©.
        '''
        self.position_historique = 0
        chaine=""
        for element in self.historique[len(self.historique) - 1 ]:
            chaine += element
        self.label_historique.config(text=chaine, width=0)
        self.nombre1=""
        self.nombre2=""
        self.symbole_operation=""
        self.resultat=""
        self.calcul.config(text="", width=22)
        self.sous_methode=False

    def fleche(self, sens):
        '''
        Cette m√©thode permet de parcourir l'historique de haut (calcul pr√©c√©dent) en bas (vers calcul le plus r√©cent) et
        d'afficher l'historique correspondant √† la position du curseur dans la liste contenant tous les calculs.
        Entr√©e : variable str pour renseigner le sens du mouvement dans l'historique.
        Sortie : modification du label historique.
        '''
        chaine=""
        if sens=='up' :
            self.position_historique += 1
            for element in self.historique[len(self.historique)-2-self.position_historique] :
                chaine+=element
            self.label_historique.config(text=chaine, width=0)
        else :
            self.position_historique -= 1
            for element in self.historique[len(self.historique)-2-self.position_historique] :
                chaine+=element
            self.label_historique.config(text=chaine, width=0)

    def relancer(self):
        '''
        Cette m√©thode permet √† l'utilisateur de renouveller un ancien calcul de l'historique s'il le souhaite.
        '''
        self.nombre1=self.historique[len(self.historique)-2-self.position_historique][0]
        self.nombre2=self.historique[len(self.historique)-2-self.position_historique][2]
        self.symbole_operation=self.historique[len(self.historique)-2-self.position_historique][1]
        self.calculer()

def main():
    f=Calculatrice()
    f.mainloop()

main()